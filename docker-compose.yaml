version: '3.8'

services:
    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
        user: '0'
        command: >
            bash -c '
            if [ x${ELASTIC_PASSWORD} == x ]; then
                echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
                exit 1;
            elif [ x${KIBANA_PASSWORD} == x ]; then
                echo "Set the KIBANA_PASSWORD environment variable in the .env file";
                exit 1;
            fi;
            if [ ! -f config/certs/ca.zip ]; then
                echo "Creating CA";
                bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                unzip config/certs/ca.zip -d config/certs;
            fi;
            if [ ! -f config/certs/certs.zip ]; then
                echo "Creating certs";
                echo -ne \
                "instances:\n"\
                "  - name: es01\n"\
                "    dns:\n"\
                "      - es01\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: kibana\n"\
                "    dns:\n"\
                "      - kibana\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                > config/certs/instances.yml;
                bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                unzip config/certs/certs.zip -d config/certs;
            fi;
            echo "Setting file permissions"
            chown -R root:root config/certs;
            find . -type d -exec chmod 750 \{\} \;;
            find . -type f -exec chmod 640 \{\} \;;
            echo "Waiting for Elasticsearch availability";
            until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
            echo "Setting kibana_system password";
            until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
            echo "All done!";
            '
        healthcheck:
            test: ['CMD-SHELL', '[ -f config/certs/es01/es01.crt ]']
            interval: 1s
            timeout: 5s
            retries: 120

    es01:
        depends_on:
            setup:
                condition: service_healthy
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        container_name: h3micro_elasticsearch
        labels:
            co.elastic.logs/module: elasticsearch
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - esdata01:/usr/share/elasticsearch/data
        ports:
            - ${ES_PORT}:9200
        environment:
            - node.name=es01
            - cluster.name=${CLUSTER_NAME}
            - discovery.type=single-node
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es01/es01.key
            - xpack.security.http.ssl.certificate=certs/es01/es01.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es01/es01.key
            - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
        mem_limit: ${ES_MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    kibana:
        depends_on:
            es01:
                condition: service_healthy
        image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
        container_name: h3micro_kibana
        labels:
            co.elastic.logs/module: kibana
        volumes:
            - certs:/usr/share/kibana/config/certs
            - kibanadata:/usr/share/kibana/data
        ports:
            - ${KIBANA_PORT}:5601
        environment:
            - SERVERNAME=kibana
            - ELASTICSEARCH_HOSTS=https://es01:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
            - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
            - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
            - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
            - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
        mem_limit: ${KB_MEM_LIMIT}
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    metricbeat01:
        depends_on:
            es01:
                condition: service_healthy
            kibana:
                condition: service_healthy
        image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
        user: root
        volumes:
            - certs:/usr/share/metricbeat/certs
            - metricbeatdata01:/usr/share/metricbeat/data
            - './metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro'
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
            - '/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro'
            # - '/proc:/hostfs/proc:ro'
            # - '/:/hostfs:ro'
        environment:
            - ELASTIC_USER=elastic
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - ELASTIC_HOSTS=https://es01:9200
            - KIBANA_HOSTS=http://kibana:5601
            - LOGSTASH_HOSTS=http://logstash01:9600

    filebeat01:
        depends_on:
            es01:
                condition: service_healthy
        image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
        user: root
        ports:
            - '5044:5044'
        volumes:
            - certs:/usr/share/filebeat/certs
            - filebeatdata01:/usr/share/filebeat/data
            - './server/logs/:/usr/share/filebeat/ingest_data/'
            - './filebeat.yml:/usr/share/filebeat/filebeat.yml:ro'
            - '/var/lib/docker/containers:/var/lib/docker/containers:ro'
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
        environment:
            - ELASTIC_USER=elastic
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - ELASTIC_HOSTS=https://es01:9200
            - KIBANA_HOSTS=http://kibana:5601
            - LOGSTASH_HOSTS=http://logstash01:9600

    logstash01:
        depends_on:
            es01:
                condition: service_healthy
            kibana:
                condition: service_healthy
        image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
        labels:
            co.elastic.logs/module: logstash
        user: root
        volumes:
            - certs:/usr/share/logstash/certs
            - logstashdata01:/usr/share/logstash/data
            - './logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro'
            - './server/logs/:/usr/share/logstash/ingest_data/'
            # - './logstash_ingest_data/:/usr/share/logstash/ingest_data/'
        environment:
            - xpack.monitoring.enabled=false
            - ELASTIC_USER=elastic
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - ELASTIC_HOSTS=https://es01:9200

    db:
        image: postgres
        container_name: h3micro_db
        restart: on-failure
        volumes:
            - ./db:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: 123321
        ports:
            - '5432:5432'
        networks:
            - h3micronetwork

    client:
        build: ./client
        container_name: h3micro_client
        # stdin_open: true
        ports:
            - '5173:5173'
            - '5174:5174'
        volumes:
            - ./client:/usr/src/client
            - /usr/src/client/node_modules
        links:
            - server
        restart: on-failure
        networks:
            - h3micronetwork
    server:
        build: ./server
        container_name: h3micro_server
        ports:
            - '8000:8000'
        volumes:
            - ./server:/usr/src/server
            - /usr/src/server/node_modules
        links:
            - db
        environment:
            PORT: 8000
            POSTGRES_URI: postgres://postgres:123321@db:5432/postgres
            # POSTGRES_URI: postgres://h3microdb_user:yjU2aGNkKecLUhA4LLh3HAqzunXaLh1P@dpg-ckn625p1rp3c7396dom0-a.frankfurt-postgres.render.com/h3microdb?ssl=true
        restart: on-failure
        networks:
            - h3micronetwork
        logging:
            driver: gelf
            options:
                gelf-address: 'udp://localhost:5000'

        depends_on:
            - db
    # reverse_proxy_server:
    #     image: nginx
    #     container_name: h3micro_nginx_server
    #     ports:
    #         - '80:80'
    #         - '443:443'
    #     volumes:
    #         - ./reverse_proxy/server/nginx.conf:/etc/nginx/nginx.conf
    #         - ./reverse_proxy/server/ssl:/etc/nginx/ssl
    #     depends_on:
    #         - server
    #     networks:
    #         - h3micronetwork
    #     restart: on-failure:3

    # reverse_proxy_client:
    #     image: nginx
    #     container_name: h3micro_nginx_client
    #     ports:
    #         - '800:800'
    #         - '444:444'
    #     volumes:
    #         - ./reverse_proxy/client/nginx.conf:/etc/nginx/nginx.conf
    #         - ./reverse_proxy/client/ssl:/etc/nginx/ssl
    #     depends_on:
    #         - client
    #     networks:
    #         - h3micronetwork
    #     restart: on-failure:3

    # cadvisor:
    #     image: gcr.io/cadvisor/cadvisor-arm64:v0.47.2
    #     container_name: h3micro_cadvisor
    #     privileged: true
    #     ports:
    #         - '8080:8080'
    #     devices:
    #         - /dev/kmsg:/dev/kmsg
    #     volumes:
    #         - /var/run:/var/run:ro
    #         - /sys:/sys:ro
    #         - /var/lib/docker/:/var/lib/docker:ro
    #         - /var/run/docker.sock:/var/run/docker.sock:ro
    #         - /etc/machine-id:/etc/machine-id:ro
    #         - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    #     networks:
    #         - h3micronetwork
    #     restart: always
    #     deploy:
    #         mode: global

    # grafana:
    #     image: grafana/grafana:latest
    #     container_name: h3micro_grafana
    #     ports:
    #         - '3000:3000'
    #     volumes:
    #         - ./grafana/data:/var/lib/grafana
    #         - ./grafana/provisioning:/etc/grafana/provisioning
    #     networks:
    #         - h3micronetwork
    #     depends_on:
    #         - cadvisor
    #     restart: on-failure

    # prometheus:
    #     image: prom/prometheus
    #     container_name: h3micro_prometheus
    #     ports:
    #         - '9090:9090'
    #     volumes:
    #         - ./prometheus/config:/etc/prometheus
    #     command:
    #         - '--config.file=/etc/prometheus/prometheus.yml'
    #     networks:
    #         - h3micronetwork
    #     restart: on-failure
networks:
    h3micronetwork:
        driver: bridge

volumes:
    certs:
        driver: local
    esdata01:
        driver: local
    kibanadata:
        driver: local
    metricbeatdata01:
        driver: local
    filebeatdata01:
        driver: local
    logstashdata01:
        driver: local
